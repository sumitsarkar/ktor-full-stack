/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.ChunksDetailedSizeRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ChunksDetailedSize(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ChunksDetailedSizeRecord>?,
    aliased: Table<ChunksDetailedSizeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ChunksDetailedSizeRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.chunks_detailed_size</code>
         */
        val CHUNKS_DETAILED_SIZE = ChunksDetailedSize()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ChunksDetailedSizeRecord> = ChunksDetailedSizeRecord::class.java

    /**
     * The column <code>public.chunks_detailed_size.chunk_schema</code>.
     */
    val CHUNK_SCHEMA: TableField<ChunksDetailedSizeRecord, String?> = createField(DSL.name("chunk_schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.chunks_detailed_size.chunk_name</code>.
     */
    val CHUNK_NAME: TableField<ChunksDetailedSizeRecord, String?> = createField(DSL.name("chunk_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.chunks_detailed_size.table_bytes</code>.
     */
    val TABLE_BYTES: TableField<ChunksDetailedSizeRecord, Long?> = createField(DSL.name("table_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.chunks_detailed_size.index_bytes</code>.
     */
    val INDEX_BYTES: TableField<ChunksDetailedSizeRecord, Long?> = createField(DSL.name("index_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.chunks_detailed_size.toast_bytes</code>.
     */
    val TOAST_BYTES: TableField<ChunksDetailedSizeRecord, Long?> = createField(DSL.name("toast_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.chunks_detailed_size.total_bytes</code>.
     */
    val TOTAL_BYTES: TableField<ChunksDetailedSizeRecord, Long?> = createField(DSL.name("total_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.chunks_detailed_size.node_name</code>.
     */
    val NODE_NAME: TableField<ChunksDetailedSizeRecord, String?> = createField(DSL.name("node_name"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<ChunksDetailedSizeRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<ChunksDetailedSizeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.chunks_detailed_size</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.chunks_detailed_size</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.chunks_detailed_size</code> table reference
     */
    constructor(): this(DSL.name("chunks_detailed_size"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): ChunksDetailedSize = ChunksDetailedSize(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): ChunksDetailedSize = ChunksDetailedSize(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): ChunksDetailedSize = ChunksDetailedSize(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ChunksDetailedSize = ChunksDetailedSize(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<String?, String?, Long?, Long?, Long?, Long?, String?> = super.fieldsRow() as Row7<String?, String?, Long?, Long?, Long?, Long?, String?>

    /**
     * Call this table-valued function
     */
    fun call(
          hypertable: Any?
    ): ChunksDetailedSize = ChunksDetailedSize(DSL.name("chunks_detailed_size"), null, arrayOf(
          DSL.value(hypertable, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          hypertable: Field<Any?>
    ): ChunksDetailedSize = ChunksDetailedSize(DSL.name("chunks_detailed_size"), null, arrayOf(
          hypertable
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
