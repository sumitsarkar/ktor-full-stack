/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.AddDataNodeRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AddDataNode(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AddDataNodeRecord>?,
    aliased: Table<AddDataNodeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AddDataNodeRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.add_data_node</code>
         */
        val ADD_DATA_NODE = AddDataNode()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AddDataNodeRecord> = AddDataNodeRecord::class.java

    /**
     * The column <code>public.add_data_node.node_name</code>.
     */
    val NODE_NAME: TableField<AddDataNodeRecord, String?> = createField(DSL.name("node_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.add_data_node.host</code>.
     */
    val HOST: TableField<AddDataNodeRecord, String?> = createField(DSL.name("host"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.add_data_node.port</code>.
     */
    val PORT: TableField<AddDataNodeRecord, Int?> = createField(DSL.name("port"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.add_data_node.database</code>.
     */
    val DATABASE: TableField<AddDataNodeRecord, String?> = createField(DSL.name("database"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.add_data_node.node_created</code>.
     */
    val NODE_CREATED: TableField<AddDataNodeRecord, Boolean?> = createField(DSL.name("node_created"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.add_data_node.database_created</code>.
     */
    val DATABASE_CREATED: TableField<AddDataNodeRecord, Boolean?> = createField(DSL.name("database_created"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.add_data_node.extension_created</code>.
     */
    val EXTENSION_CREATED: TableField<AddDataNodeRecord, Boolean?> = createField(DSL.name("extension_created"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<AddDataNodeRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<AddDataNodeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.add_data_node</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.add_data_node</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.add_data_node</code> table reference
     */
    constructor(): this(DSL.name("add_data_node"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): AddDataNode = AddDataNode(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): AddDataNode = AddDataNode(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): AddDataNode = AddDataNode(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AddDataNode = AddDataNode(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<String?, String?, Int?, String?, Boolean?, Boolean?, Boolean?> = super.fieldsRow() as Row7<String?, String?, Int?, String?, Boolean?, Boolean?, Boolean?>

    /**
     * Call this table-valued function
     */
    fun call(
          nodeName: String?
        , host: String?
        , database: String?
        , port: Int?
        , ifNotExists: Boolean?
        , bootstrap: Boolean?
        , password: String?
    ): AddDataNode = AddDataNode(DSL.name("add_data_node"), null, arrayOf(
          DSL.value(nodeName, SQLDataType.VARCHAR)
        , DSL.value(host, SQLDataType.CLOB)
        , DSL.value(database, SQLDataType.VARCHAR.defaultValue(DSL.field("NULL::name", SQLDataType.VARCHAR)))
        , DSL.value(port, SQLDataType.INTEGER.defaultValue(DSL.field("NULL::integer", SQLDataType.INTEGER)))
        , DSL.value(ifNotExists, SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)))
        , DSL.value(bootstrap, SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)))
        , DSL.value(password, SQLDataType.CLOB.defaultValue(DSL.field("NULL::text", SQLDataType.CLOB)))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          nodeName: Field<String?>
        , host: Field<String?>
        , database: Field<String?>
        , port: Field<Int?>
        , ifNotExists: Field<Boolean?>
        , bootstrap: Field<Boolean?>
        , password: Field<String?>
    ): AddDataNode = AddDataNode(DSL.name("add_data_node"), null, arrayOf(
          nodeName
        , host
        , database
        , port
        , ifNotExists
        , bootstrap
        , password
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
