/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.routines


import me.sumit.uptime.database.generated.Public

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.Record
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Interpolate2 : AbstractRoutine<Int>("interpolate", Public.PUBLIC, SQLDataType.INTEGER) {
    companion object {

        /**
         * The parameter <code>public.interpolate.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<Int?> = Internal.createParameter("RETURN_VALUE", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>public.interpolate.value</code>.
         */
        val VALUE: Parameter<Int?> = Internal.createParameter("value", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>public.interpolate.prev</code>.
         */
        val PREV: Parameter<Record?> = Internal.createParameter("prev", SQLDataType.RECORD.defaultValue(DSL.field("NULL::record", SQLDataType.RECORD)), true, false)

        /**
         * The parameter <code>public.interpolate.next</code>.
         */
        val NEXT: Parameter<Record?> = Internal.createParameter("next", SQLDataType.RECORD.defaultValue(DSL.field("NULL::record", SQLDataType.RECORD)), true, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(VALUE)
        addInParameter(PREV)
        addInParameter(NEXT)
        setOverloaded(true)
    }

    /**
     * Set the <code>value</code> parameter IN value to the routine
     */
    fun setValue(value: Int?) = setValue(VALUE, value)

    /**
     * Set the <code>value</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setValue(field: Field<Int?>): Unit {
        setField(VALUE, field)
    }

    /**
     * Set the <code>prev</code> parameter IN value to the routine
     */
    fun setPrev(value: Record?) = setValue(PREV, value)

    /**
     * Set the <code>prev</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setPrev(field: Field<Record?>): Unit {
        setField(PREV, field)
    }

    /**
     * Set the <code>next</code> parameter IN value to the routine
     */
    fun setNext(value: Record?) = setValue(NEXT, value)

    /**
     * Set the <code>next</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setNext(field: Field<Record?>): Unit {
        setField(NEXT, field)
    }
}
