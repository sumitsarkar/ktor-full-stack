/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.ShowTablespacesRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row1
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShowTablespaces(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ShowTablespacesRecord>?,
    aliased: Table<ShowTablespacesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ShowTablespacesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.show_tablespaces</code>
         */
        val SHOW_TABLESPACES = ShowTablespaces()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ShowTablespacesRecord> = ShowTablespacesRecord::class.java

    /**
     * The column <code>public.show_tablespaces.show_tablespaces</code>.
     */
    val SHOW_TABLESPACES_: TableField<ShowTablespacesRecord, String?> = createField(DSL.name("show_tablespaces"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<ShowTablespacesRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<ShowTablespacesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.show_tablespaces</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.show_tablespaces</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.show_tablespaces</code> table reference
     */
    constructor(): this(DSL.name("show_tablespaces"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): ShowTablespaces = ShowTablespaces(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): ShowTablespaces = ShowTablespaces(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): ShowTablespaces = ShowTablespaces(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ShowTablespaces = ShowTablespaces(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row1<String?> = super.fieldsRow() as Row1<String?>

    /**
     * Call this table-valued function
     */
    fun call(
          hypertable: Any?
    ): ShowTablespaces = ShowTablespaces(DSL.name("show_tablespaces"), null, arrayOf(
          DSL.value(hypertable, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          hypertable: Field<Any?>
    ): ShowTablespaces = ShowTablespaces(DSL.name("show_tablespaces"), null, arrayOf(
          hypertable
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
