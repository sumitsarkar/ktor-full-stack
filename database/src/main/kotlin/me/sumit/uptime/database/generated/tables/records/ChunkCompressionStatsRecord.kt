/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables.records


import me.sumit.uptime.database.generated.tables.ChunkCompressionStats

import org.jooq.Field
import org.jooq.Record12
import org.jooq.Row12
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ChunkCompressionStatsRecord() : TableRecordImpl<ChunkCompressionStatsRecord>(ChunkCompressionStats.CHUNK_COMPRESSION_STATS), Record12<String?, String?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?> {

    var chunkSchema: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var chunkName: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var compressionStatus: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var beforeCompressionTableBytes: Long?
        set(value) = set(3, value)
        get() = get(3) as Long?

    var beforeCompressionIndexBytes: Long?
        set(value) = set(4, value)
        get() = get(4) as Long?

    var beforeCompressionToastBytes: Long?
        set(value) = set(5, value)
        get() = get(5) as Long?

    var beforeCompressionTotalBytes: Long?
        set(value) = set(6, value)
        get() = get(6) as Long?

    var afterCompressionTableBytes: Long?
        set(value) = set(7, value)
        get() = get(7) as Long?

    var afterCompressionIndexBytes: Long?
        set(value) = set(8, value)
        get() = get(8) as Long?

    var afterCompressionToastBytes: Long?
        set(value) = set(9, value)
        get() = get(9) as Long?

    var afterCompressionTotalBytes: Long?
        set(value) = set(10, value)
        get() = get(10) as Long?

    var nodeName: String?
        set(value) = set(11, value)
        get() = get(11) as String?

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row12<String?, String?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?> = super.fieldsRow() as Row12<String?, String?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?>
    override fun valuesRow(): Row12<String?, String?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?> = super.valuesRow() as Row12<String?, String?, String?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?>
    override fun field1(): Field<String?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.CHUNK_SCHEMA
    override fun field2(): Field<String?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.CHUNK_NAME
    override fun field3(): Field<String?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.COMPRESSION_STATUS
    override fun field4(): Field<Long?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.BEFORE_COMPRESSION_TABLE_BYTES
    override fun field5(): Field<Long?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.BEFORE_COMPRESSION_INDEX_BYTES
    override fun field6(): Field<Long?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.BEFORE_COMPRESSION_TOAST_BYTES
    override fun field7(): Field<Long?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.BEFORE_COMPRESSION_TOTAL_BYTES
    override fun field8(): Field<Long?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.AFTER_COMPRESSION_TABLE_BYTES
    override fun field9(): Field<Long?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.AFTER_COMPRESSION_INDEX_BYTES
    override fun field10(): Field<Long?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.AFTER_COMPRESSION_TOAST_BYTES
    override fun field11(): Field<Long?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.AFTER_COMPRESSION_TOTAL_BYTES
    override fun field12(): Field<String?> = ChunkCompressionStats.CHUNK_COMPRESSION_STATS.NODE_NAME
    override fun component1(): String? = chunkSchema
    override fun component2(): String? = chunkName
    override fun component3(): String? = compressionStatus
    override fun component4(): Long? = beforeCompressionTableBytes
    override fun component5(): Long? = beforeCompressionIndexBytes
    override fun component6(): Long? = beforeCompressionToastBytes
    override fun component7(): Long? = beforeCompressionTotalBytes
    override fun component8(): Long? = afterCompressionTableBytes
    override fun component9(): Long? = afterCompressionIndexBytes
    override fun component10(): Long? = afterCompressionToastBytes
    override fun component11(): Long? = afterCompressionTotalBytes
    override fun component12(): String? = nodeName
    override fun value1(): String? = chunkSchema
    override fun value2(): String? = chunkName
    override fun value3(): String? = compressionStatus
    override fun value4(): Long? = beforeCompressionTableBytes
    override fun value5(): Long? = beforeCompressionIndexBytes
    override fun value6(): Long? = beforeCompressionToastBytes
    override fun value7(): Long? = beforeCompressionTotalBytes
    override fun value8(): Long? = afterCompressionTableBytes
    override fun value9(): Long? = afterCompressionIndexBytes
    override fun value10(): Long? = afterCompressionToastBytes
    override fun value11(): Long? = afterCompressionTotalBytes
    override fun value12(): String? = nodeName

    override fun value1(value: String?): ChunkCompressionStatsRecord {
        this.chunkSchema = value
        return this
    }

    override fun value2(value: String?): ChunkCompressionStatsRecord {
        this.chunkName = value
        return this
    }

    override fun value3(value: String?): ChunkCompressionStatsRecord {
        this.compressionStatus = value
        return this
    }

    override fun value4(value: Long?): ChunkCompressionStatsRecord {
        this.beforeCompressionTableBytes = value
        return this
    }

    override fun value5(value: Long?): ChunkCompressionStatsRecord {
        this.beforeCompressionIndexBytes = value
        return this
    }

    override fun value6(value: Long?): ChunkCompressionStatsRecord {
        this.beforeCompressionToastBytes = value
        return this
    }

    override fun value7(value: Long?): ChunkCompressionStatsRecord {
        this.beforeCompressionTotalBytes = value
        return this
    }

    override fun value8(value: Long?): ChunkCompressionStatsRecord {
        this.afterCompressionTableBytes = value
        return this
    }

    override fun value9(value: Long?): ChunkCompressionStatsRecord {
        this.afterCompressionIndexBytes = value
        return this
    }

    override fun value10(value: Long?): ChunkCompressionStatsRecord {
        this.afterCompressionToastBytes = value
        return this
    }

    override fun value11(value: Long?): ChunkCompressionStatsRecord {
        this.afterCompressionTotalBytes = value
        return this
    }

    override fun value12(value: String?): ChunkCompressionStatsRecord {
        this.nodeName = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: Long?, value5: Long?, value6: Long?, value7: Long?, value8: Long?, value9: Long?, value10: Long?, value11: Long?, value12: String?): ChunkCompressionStatsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        return this
    }

    /**
     * Create a detached, initialised ChunkCompressionStatsRecord
     */
    constructor(chunkSchema: String? = null, chunkName: String? = null, compressionStatus: String? = null, beforeCompressionTableBytes: Long? = null, beforeCompressionIndexBytes: Long? = null, beforeCompressionToastBytes: Long? = null, beforeCompressionTotalBytes: Long? = null, afterCompressionTableBytes: Long? = null, afterCompressionIndexBytes: Long? = null, afterCompressionToastBytes: Long? = null, afterCompressionTotalBytes: Long? = null, nodeName: String? = null): this() {
        this.chunkSchema = chunkSchema
        this.chunkName = chunkName
        this.compressionStatus = compressionStatus
        this.beforeCompressionTableBytes = beforeCompressionTableBytes
        this.beforeCompressionIndexBytes = beforeCompressionIndexBytes
        this.beforeCompressionToastBytes = beforeCompressionToastBytes
        this.beforeCompressionTotalBytes = beforeCompressionTotalBytes
        this.afterCompressionTableBytes = afterCompressionTableBytes
        this.afterCompressionIndexBytes = afterCompressionIndexBytes
        this.afterCompressionToastBytes = afterCompressionToastBytes
        this.afterCompressionTotalBytes = afterCompressionTotalBytes
        this.nodeName = nodeName
    }
}
