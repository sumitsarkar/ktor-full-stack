/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.routines


import me.sumit.uptime.database.generated.Public

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AddContinuousAggregatePolicy : AbstractRoutine<Int>("add_continuous_aggregate_policy", Public.PUBLIC, SQLDataType.INTEGER) {
    companion object {

        /**
         * The parameter <code>public.add_continuous_aggregate_policy.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<Int?> = Internal.createParameter("RETURN_VALUE", SQLDataType.INTEGER, false, false)
        @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val CONTINUOUS_AGGREGATE: Parameter<Any?> = Internal.createParameter("continuous_aggregate", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""), false, false)
        @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val START_OFFSET: Parameter<Any?> = Internal.createParameter("start_offset", SQLDataType.OTHER, false, false)
        @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val END_OFFSET: Parameter<Any?> = Internal.createParameter("end_offset", SQLDataType.OTHER, false, false)

        /**
         * The parameter <code>public.add_continuous_aggregate_policy.schedule_interval</code>.
         */
        val SCHEDULE_INTERVAL: Parameter<YearToSecond?> = Internal.createParameter("schedule_interval", SQLDataType.INTERVAL, false, false)

        /**
         * The parameter <code>public.add_continuous_aggregate_policy.if_not_exists</code>.
         */
        val IF_NOT_EXISTS: Parameter<Boolean?> = Internal.createParameter("if_not_exists", SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), true, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(CONTINUOUS_AGGREGATE)
        addInParameter(START_OFFSET)
        addInParameter(END_OFFSET)
        addInParameter(SCHEDULE_INTERVAL)
        addInParameter(IF_NOT_EXISTS)
    }

    /**
     * Set the <code>continuous_aggregate</code> parameter IN value to the routine
     */
    fun setContinuousAggregate(value: Any?) = setValue(CONTINUOUS_AGGREGATE, value)

    /**
     * Set the <code>continuous_aggregate</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setContinuousAggregate(field: Field<Any?>): Unit {
        setField(CONTINUOUS_AGGREGATE, field)
    }

    /**
     * Set the <code>start_offset</code> parameter IN value to the routine
     */
    fun setStartOffset(value: Any?) = setValue(START_OFFSET, value)

    /**
     * Set the <code>start_offset</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setStartOffset(field: Field<Any?>): Unit {
        setField(START_OFFSET, field)
    }

    /**
     * Set the <code>end_offset</code> parameter IN value to the routine
     */
    fun setEndOffset(value: Any?) = setValue(END_OFFSET, value)

    /**
     * Set the <code>end_offset</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setEndOffset(field: Field<Any?>): Unit {
        setField(END_OFFSET, field)
    }

    /**
     * Set the <code>schedule_interval</code> parameter IN value to the routine
     */
    fun setScheduleInterval(value: YearToSecond?) = setValue(SCHEDULE_INTERVAL, value)

    /**
     * Set the <code>schedule_interval</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setScheduleInterval(field: Field<YearToSecond?>): Unit {
        setField(SCHEDULE_INTERVAL, field)
    }

    /**
     * Set the <code>if_not_exists</code> parameter IN value to the routine
     */
    fun setIfNotExists(value: Boolean?) = setValue(IF_NOT_EXISTS, value)

    /**
     * Set the <code>if_not_exists</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setIfNotExists(field: Field<Boolean?>): Unit {
        setField(IF_NOT_EXISTS, field)
    }
}
