/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.CreateDistributedHypertableRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CreateDistributedHypertable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CreateDistributedHypertableRecord>?,
    aliased: Table<CreateDistributedHypertableRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CreateDistributedHypertableRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.create_distributed_hypertable</code>
         */
        val CREATE_DISTRIBUTED_HYPERTABLE = CreateDistributedHypertable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CreateDistributedHypertableRecord> = CreateDistributedHypertableRecord::class.java

    /**
     * The column <code>public.create_distributed_hypertable.hypertable_id</code>.
     */
    val HYPERTABLE_ID: TableField<CreateDistributedHypertableRecord, Int?> = createField(DSL.name("hypertable_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.create_distributed_hypertable.schema_name</code>.
     */
    val SCHEMA_NAME: TableField<CreateDistributedHypertableRecord, String?> = createField(DSL.name("schema_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.create_distributed_hypertable.table_name</code>.
     */
    val TABLE_NAME: TableField<CreateDistributedHypertableRecord, String?> = createField(DSL.name("table_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.create_distributed_hypertable.created</code>.
     */
    val CREATED: TableField<CreateDistributedHypertableRecord, Boolean?> = createField(DSL.name("created"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<CreateDistributedHypertableRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<CreateDistributedHypertableRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.create_distributed_hypertable</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.create_distributed_hypertable</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.create_distributed_hypertable</code> table reference
     */
    constructor(): this(DSL.name("create_distributed_hypertable"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): CreateDistributedHypertable = CreateDistributedHypertable(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): CreateDistributedHypertable = CreateDistributedHypertable(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): CreateDistributedHypertable = CreateDistributedHypertable(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CreateDistributedHypertable = CreateDistributedHypertable(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, String?, String?, Boolean?> = super.fieldsRow() as Row4<Int?, String?, String?, Boolean?>

    /**
     * Call this table-valued function
     */
    fun call(
          relation: Any?
        , timeColumnName: String?
        , partitioningColumn: String?
        , numberPartitions: Int?
        , associatedSchemaName: String?
        , associatedTablePrefix: String?
        , chunkTimeInterval: Any?
        , createDefaultIndexes: Boolean?
        , ifNotExists: Boolean?
        , partitioningFunc: String?
        , migrateData: Boolean?
        , chunkTargetSize: String?
        , chunkSizingFunc: String?
        , timePartitioningFunc: String?
        , replicationFactor: Int?
        , dataNodes: Array<String?>?
    ): CreateDistributedHypertable = CreateDistributedHypertable(DSL.name("create_distributed_hypertable"), null, arrayOf(
          DSL.value(relation, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""))
        , DSL.value(timeColumnName, SQLDataType.VARCHAR)
        , DSL.value(partitioningColumn, SQLDataType.VARCHAR.defaultValue(DSL.field("NULL::name", SQLDataType.VARCHAR)))
        , DSL.value(numberPartitions, SQLDataType.INTEGER.defaultValue(DSL.field("NULL::integer", SQLDataType.INTEGER)))
        , DSL.value(associatedSchemaName, SQLDataType.VARCHAR.defaultValue(DSL.field("NULL::name", SQLDataType.VARCHAR)))
        , DSL.value(associatedTablePrefix, SQLDataType.VARCHAR.defaultValue(DSL.field("NULL::name", SQLDataType.VARCHAR)))
        , DSL.value(chunkTimeInterval, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"").defaultValue(DSL.field("NULL::bigint", org.jooq.impl.SQLDataType.OTHER) as Any?))
        , DSL.value(createDefaultIndexes, SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)))
        , DSL.value(ifNotExists, SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)))
        , DSL.value(partitioningFunc, SQLDataType.VARCHAR.defaultValue(DSL.field("NULL::regproc", SQLDataType.VARCHAR)))
        , DSL.value(migrateData, SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)))
        , DSL.value(chunkTargetSize, SQLDataType.CLOB.defaultValue(DSL.field("NULL::text", SQLDataType.CLOB)))
        , DSL.value(chunkSizingFunc, SQLDataType.VARCHAR.defaultValue(DSL.field("'_timescaledb_internal.calculate_chunk_interval'::regproc", SQLDataType.VARCHAR)))
        , DSL.value(timePartitioningFunc, SQLDataType.VARCHAR.defaultValue(DSL.field("NULL::regproc", SQLDataType.VARCHAR)))
        , DSL.value(replicationFactor, SQLDataType.INTEGER.defaultValue(DSL.field("1", SQLDataType.INTEGER)))
        , DSL.value(dataNodes, SQLDataType.VARCHAR.getArrayDataType())
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          relation: Field<Any?>
        , timeColumnName: Field<String?>
        , partitioningColumn: Field<String?>
        , numberPartitions: Field<Int?>
        , associatedSchemaName: Field<String?>
        , associatedTablePrefix: Field<String?>
        , chunkTimeInterval: Field<Any?>
        , createDefaultIndexes: Field<Boolean?>
        , ifNotExists: Field<Boolean?>
        , partitioningFunc: Field<String?>
        , migrateData: Field<Boolean?>
        , chunkTargetSize: Field<String?>
        , chunkSizingFunc: Field<String?>
        , timePartitioningFunc: Field<String?>
        , replicationFactor: Field<Int?>
        , dataNodes: Field<Array<String?>?>
    ): CreateDistributedHypertable = CreateDistributedHypertable(DSL.name("create_distributed_hypertable"), null, arrayOf(
          relation
        , timeColumnName
        , partitioningColumn
        , numberPartitions
        , associatedSchemaName
        , associatedTablePrefix
        , chunkTimeInterval
        , createDefaultIndexes
        , ifNotExists
        , partitioningFunc
        , migrateData
        , chunkTargetSize
        , chunkSizingFunc
        , timePartitioningFunc
        , replicationFactor
        , dataNodes
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
