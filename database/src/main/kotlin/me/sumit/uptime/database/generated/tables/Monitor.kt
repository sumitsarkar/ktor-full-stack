/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import java.time.OffsetDateTime

import kotlin.collections.List

import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.keys.MONITOR_PKEY
import me.sumit.uptime.database.generated.keys.MONITOR__MONITOR_MONITOR_TYPE_FKEY
import me.sumit.uptime.database.generated.tables.records.MonitorRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Monitor(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, MonitorRecord>?,
    aliased: Table<MonitorRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<MonitorRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.monitor</code>
         */
        val MONITOR = Monitor()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MonitorRecord> = MonitorRecord::class.java

    /**
     * The column <code>public.monitor.id</code>.
     */
    val ID: TableField<MonitorRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.monitor.name</code>.
     */
    val NAME: TableField<MonitorRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.monitor.endpoint</code>.
     */
    val ENDPOINT: TableField<MonitorRecord, String?> = createField(DSL.name("endpoint"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.monitor.monitor_type</code>.
     */
    val MONITOR_TYPE: TableField<MonitorRecord, Long?> = createField(DSL.name("monitor_type"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.monitor.created_at</code>.
     */
    val CREATED_AT: TableField<MonitorRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.monitor.modified_at</code>.
     */
    val MODIFIED_AT: TableField<MonitorRecord, OffsetDateTime?> = createField(DSL.name("modified_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.monitor.created_by</code>.
     */
    val CREATED_BY: TableField<MonitorRecord, String?> = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.monitor.modified_by</code>.
     */
    val MODIFIED_BY: TableField<MonitorRecord, String?> = createField(DSL.name("modified_by"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<MonitorRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<MonitorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.monitor</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.monitor</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.monitor</code> table reference
     */
    constructor(): this(DSL.name("monitor"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, MonitorRecord>): this(Internal.createPathAlias(child, key), child, key, MONITOR, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<MonitorRecord, Long?> = super.getIdentity() as Identity<MonitorRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<MonitorRecord> = MONITOR_PKEY
    override fun getKeys(): List<UniqueKey<MonitorRecord>> = listOf(MONITOR_PKEY)
    override fun getReferences(): List<ForeignKey<MonitorRecord, *>> = listOf(MONITOR__MONITOR_MONITOR_TYPE_FKEY)

    private lateinit var _monitorTypes: MonitorTypes
    fun monitorTypes(): MonitorTypes {
        if (!this::_monitorTypes.isInitialized)
            _monitorTypes = MonitorTypes(this, MONITOR__MONITOR_MONITOR_TYPE_FKEY)

        return _monitorTypes;
    }
    override fun `as`(alias: String): Monitor = Monitor(DSL.name(alias), this)
    override fun `as`(alias: Name): Monitor = Monitor(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Monitor = Monitor(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Monitor = Monitor(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Long?, String?, String?, Long?, OffsetDateTime?, OffsetDateTime?, String?, String?> = super.fieldsRow() as Row8<Long?, String?, String?, Long?, OffsetDateTime?, OffsetDateTime?, String?, String?>
}
