/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables.daos


import kotlin.collections.List

import me.sumit.uptime.database.generated.enums.MonitorType
import me.sumit.uptime.database.generated.tables.MonitorTypes
import me.sumit.uptime.database.generated.tables.records.MonitorTypesRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MonitorTypesDao(configuration: Configuration?) : DAOImpl<MonitorTypesRecord, me.sumit.uptime.database.generated.tables.pojos.MonitorTypes, Long>(MonitorTypes.MONITOR_TYPES, me.sumit.uptime.database.generated.tables.pojos.MonitorTypes::class.java, configuration) {

    /**
     * Create a new MonitorTypesDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: me.sumit.uptime.database.generated.tables.pojos.MonitorTypes): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<me.sumit.uptime.database.generated.tables.pojos.MonitorTypes> = fetchRange(MonitorTypes.MONITOR_TYPES.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<me.sumit.uptime.database.generated.tables.pojos.MonitorTypes> = fetch(MonitorTypes.MONITOR_TYPES.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): me.sumit.uptime.database.generated.tables.pojos.MonitorTypes? = fetchOne(MonitorTypes.MONITOR_TYPES.ID, value)

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfType(lowerInclusive: MonitorType?, upperInclusive: MonitorType?): List<me.sumit.uptime.database.generated.tables.pojos.MonitorTypes> = fetchRange(MonitorTypes.MONITOR_TYPES.TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    fun fetchByType(vararg values: MonitorType): List<me.sumit.uptime.database.generated.tables.pojos.MonitorTypes> = fetch(MonitorTypes.MONITOR_TYPES.TYPE, *values)
}
