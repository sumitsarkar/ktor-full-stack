/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables.records


import me.sumit.uptime.database.generated.tables.HypertableDetailedSize

import org.jooq.Field
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class HypertableDetailedSizeRecord() : TableRecordImpl<HypertableDetailedSizeRecord>(HypertableDetailedSize.HYPERTABLE_DETAILED_SIZE), Record5<Long?, Long?, Long?, Long?, String?> {

    var tableBytes: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var indexBytes: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var toastBytes: Long?
        set(value) = set(2, value)
        get() = get(2) as Long?

    var totalBytes: Long?
        set(value) = set(3, value)
        get() = get(3) as Long?

    var nodeName: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, Long?, Long?, Long?, String?> = super.fieldsRow() as Row5<Long?, Long?, Long?, Long?, String?>
    override fun valuesRow(): Row5<Long?, Long?, Long?, Long?, String?> = super.valuesRow() as Row5<Long?, Long?, Long?, Long?, String?>
    override fun field1(): Field<Long?> = HypertableDetailedSize.HYPERTABLE_DETAILED_SIZE.TABLE_BYTES
    override fun field2(): Field<Long?> = HypertableDetailedSize.HYPERTABLE_DETAILED_SIZE.INDEX_BYTES
    override fun field3(): Field<Long?> = HypertableDetailedSize.HYPERTABLE_DETAILED_SIZE.TOAST_BYTES
    override fun field4(): Field<Long?> = HypertableDetailedSize.HYPERTABLE_DETAILED_SIZE.TOTAL_BYTES
    override fun field5(): Field<String?> = HypertableDetailedSize.HYPERTABLE_DETAILED_SIZE.NODE_NAME
    override fun component1(): Long? = tableBytes
    override fun component2(): Long? = indexBytes
    override fun component3(): Long? = toastBytes
    override fun component4(): Long? = totalBytes
    override fun component5(): String? = nodeName
    override fun value1(): Long? = tableBytes
    override fun value2(): Long? = indexBytes
    override fun value3(): Long? = toastBytes
    override fun value4(): Long? = totalBytes
    override fun value5(): String? = nodeName

    override fun value1(value: Long?): HypertableDetailedSizeRecord {
        this.tableBytes = value
        return this
    }

    override fun value2(value: Long?): HypertableDetailedSizeRecord {
        this.indexBytes = value
        return this
    }

    override fun value3(value: Long?): HypertableDetailedSizeRecord {
        this.toastBytes = value
        return this
    }

    override fun value4(value: Long?): HypertableDetailedSizeRecord {
        this.totalBytes = value
        return this
    }

    override fun value5(value: String?): HypertableDetailedSizeRecord {
        this.nodeName = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: Long?, value5: String?): HypertableDetailedSizeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised HypertableDetailedSizeRecord
     */
    constructor(tableBytes: Long? = null, indexBytes: Long? = null, toastBytes: Long? = null, totalBytes: Long? = null, nodeName: String? = null): this() {
        this.tableBytes = tableBytes
        this.indexBytes = indexBytes
        this.toastBytes = toastBytes
        this.totalBytes = totalBytes
        this.nodeName = nodeName
    }
}
