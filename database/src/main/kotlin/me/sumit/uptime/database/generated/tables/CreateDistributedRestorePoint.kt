/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.CreateDistributedRestorePointRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CreateDistributedRestorePoint(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CreateDistributedRestorePointRecord>?,
    aliased: Table<CreateDistributedRestorePointRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CreateDistributedRestorePointRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.create_distributed_restore_point</code>
         */
        val CREATE_DISTRIBUTED_RESTORE_POINT = CreateDistributedRestorePoint()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CreateDistributedRestorePointRecord> = CreateDistributedRestorePointRecord::class.java

    /**
     * The column <code>public.create_distributed_restore_point.node_name</code>.
     */
    val NODE_NAME: TableField<CreateDistributedRestorePointRecord, String?> = createField(DSL.name("node_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.create_distributed_restore_point.node_type</code>.
     */
    val NODE_TYPE: TableField<CreateDistributedRestorePointRecord, String?> = createField(DSL.name("node_type"), SQLDataType.CLOB, this, "")
    @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val RESTORE_POINT: TableField<CreateDistributedRestorePointRecord, Any?> = createField(DSL.name("restore_point"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    private constructor(alias: Name, aliased: Table<CreateDistributedRestorePointRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<CreateDistributedRestorePointRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.create_distributed_restore_point</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.create_distributed_restore_point</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.create_distributed_restore_point</code> table reference
     */
    constructor(): this(DSL.name("create_distributed_restore_point"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): CreateDistributedRestorePoint = CreateDistributedRestorePoint(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): CreateDistributedRestorePoint = CreateDistributedRestorePoint(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): CreateDistributedRestorePoint = CreateDistributedRestorePoint(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CreateDistributedRestorePoint = CreateDistributedRestorePoint(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, String?, Any?> = super.fieldsRow() as Row3<String?, String?, Any?>

    /**
     * Call this table-valued function
     */
    fun call(
          name: String?
    ): CreateDistributedRestorePoint = CreateDistributedRestorePoint(DSL.name("create_distributed_restore_point"), null, arrayOf(
          DSL.value(name, SQLDataType.CLOB)
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          name: Field<String?>
    ): CreateDistributedRestorePoint = CreateDistributedRestorePoint(DSL.name("create_distributed_restore_point"), null, arrayOf(
          name
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
