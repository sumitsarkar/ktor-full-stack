/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables.records


import me.sumit.uptime.database.generated.tables.AddDimension

import org.jooq.Field
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AddDimensionRecord() : TableRecordImpl<AddDimensionRecord>(AddDimension.ADD_DIMENSION), Record5<Int?, String?, String?, String?, Boolean?> {

    var dimensionId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var schemaName: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var tableName: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var columnName: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var created: Boolean?
        set(value) = set(4, value)
        get() = get(4) as Boolean?

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, String?, String?, String?, Boolean?> = super.fieldsRow() as Row5<Int?, String?, String?, String?, Boolean?>
    override fun valuesRow(): Row5<Int?, String?, String?, String?, Boolean?> = super.valuesRow() as Row5<Int?, String?, String?, String?, Boolean?>
    override fun field1(): Field<Int?> = AddDimension.ADD_DIMENSION.DIMENSION_ID
    override fun field2(): Field<String?> = AddDimension.ADD_DIMENSION.SCHEMA_NAME
    override fun field3(): Field<String?> = AddDimension.ADD_DIMENSION.TABLE_NAME
    override fun field4(): Field<String?> = AddDimension.ADD_DIMENSION.COLUMN_NAME
    override fun field5(): Field<Boolean?> = AddDimension.ADD_DIMENSION.CREATED
    override fun component1(): Int? = dimensionId
    override fun component2(): String? = schemaName
    override fun component3(): String? = tableName
    override fun component4(): String? = columnName
    override fun component5(): Boolean? = created
    override fun value1(): Int? = dimensionId
    override fun value2(): String? = schemaName
    override fun value3(): String? = tableName
    override fun value4(): String? = columnName
    override fun value5(): Boolean? = created

    override fun value1(value: Int?): AddDimensionRecord {
        this.dimensionId = value
        return this
    }

    override fun value2(value: String?): AddDimensionRecord {
        this.schemaName = value
        return this
    }

    override fun value3(value: String?): AddDimensionRecord {
        this.tableName = value
        return this
    }

    override fun value4(value: String?): AddDimensionRecord {
        this.columnName = value
        return this
    }

    override fun value5(value: Boolean?): AddDimensionRecord {
        this.created = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?, value5: Boolean?): AddDimensionRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised AddDimensionRecord
     */
    constructor(dimensionId: Int? = null, schemaName: String? = null, tableName: String? = null, columnName: String? = null, created: Boolean? = null): this() {
        this.dimensionId = dimensionId
        this.schemaName = schemaName
        this.tableName = tableName
        this.columnName = columnName
        this.created = created
    }
}
