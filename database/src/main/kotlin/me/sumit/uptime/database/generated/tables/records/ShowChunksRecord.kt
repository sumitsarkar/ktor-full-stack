/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables.records


import me.sumit.uptime.database.generated.tables.ShowChunks

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Row1
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShowChunksRecord() : TableRecordImpl<ShowChunksRecord>(ShowChunks.SHOW_CHUNKS), Record1<Any?> {

    var showChunks: Any?
        set(value) = set(0, value)
        get() = get(0) as Any?

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row1<Any?> = super.fieldsRow() as Row1<Any?>
    override fun valuesRow(): Row1<Any?> = super.valuesRow() as Row1<Any?>
    @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun field1(): Field<Any?> = ShowChunks.SHOW_CHUNKS.SHOW_CHUNKS_
    @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun component1(): Any? = showChunks
    @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun value1(): Any? = showChunks

    @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun value1(value: Any?): ShowChunksRecord {
        this.showChunks = value
        return this
    }

    override fun values(value1: Any?): ShowChunksRecord {
        this.value1(value1)
        return this
    }

    /**
     * Create a detached, initialised ShowChunksRecord
     */
    constructor(showChunks: Any? = null): this() {
        this.showChunks = showChunks
    }
}
