/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables.records


import java.time.OffsetDateTime

import me.sumit.uptime.database.generated.tables.AlterJob

import org.jooq.Field
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.TableRecordImpl
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AlterJobRecord() : TableRecordImpl<AlterJobRecord>(AlterJob.ALTER_JOB), Record8<Int?, YearToSecond?, YearToSecond?, Int?, YearToSecond?, Boolean?, String?, OffsetDateTime?> {

    var jobId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var scheduleInterval: YearToSecond?
        set(value) = set(1, value)
        get() = get(1) as YearToSecond?

    var maxRuntime: YearToSecond?
        set(value) = set(2, value)
        get() = get(2) as YearToSecond?

    var maxRetries: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var retryPeriod: YearToSecond?
        set(value) = set(4, value)
        get() = get(4) as YearToSecond?

    var scheduled: Boolean?
        set(value) = set(5, value)
        get() = get(5) as Boolean?

    var config: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var nextStart: OffsetDateTime?
        set(value) = set(7, value)
        get() = get(7) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, YearToSecond?, YearToSecond?, Int?, YearToSecond?, Boolean?, String?, OffsetDateTime?> = super.fieldsRow() as Row8<Int?, YearToSecond?, YearToSecond?, Int?, YearToSecond?, Boolean?, String?, OffsetDateTime?>
    override fun valuesRow(): Row8<Int?, YearToSecond?, YearToSecond?, Int?, YearToSecond?, Boolean?, String?, OffsetDateTime?> = super.valuesRow() as Row8<Int?, YearToSecond?, YearToSecond?, Int?, YearToSecond?, Boolean?, String?, OffsetDateTime?>
    override fun field1(): Field<Int?> = AlterJob.ALTER_JOB.JOB_ID
    override fun field2(): Field<YearToSecond?> = AlterJob.ALTER_JOB.SCHEDULE_INTERVAL
    override fun field3(): Field<YearToSecond?> = AlterJob.ALTER_JOB.MAX_RUNTIME
    override fun field4(): Field<Int?> = AlterJob.ALTER_JOB.MAX_RETRIES
    override fun field5(): Field<YearToSecond?> = AlterJob.ALTER_JOB.RETRY_PERIOD
    override fun field6(): Field<Boolean?> = AlterJob.ALTER_JOB.SCHEDULED
    override fun field7(): Field<String?> = AlterJob.ALTER_JOB.CONFIG
    override fun field8(): Field<OffsetDateTime?> = AlterJob.ALTER_JOB.NEXT_START
    override fun component1(): Int? = jobId
    override fun component2(): YearToSecond? = scheduleInterval
    override fun component3(): YearToSecond? = maxRuntime
    override fun component4(): Int? = maxRetries
    override fun component5(): YearToSecond? = retryPeriod
    override fun component6(): Boolean? = scheduled
    override fun component7(): String? = config
    override fun component8(): OffsetDateTime? = nextStart
    override fun value1(): Int? = jobId
    override fun value2(): YearToSecond? = scheduleInterval
    override fun value3(): YearToSecond? = maxRuntime
    override fun value4(): Int? = maxRetries
    override fun value5(): YearToSecond? = retryPeriod
    override fun value6(): Boolean? = scheduled
    override fun value7(): String? = config
    override fun value8(): OffsetDateTime? = nextStart

    override fun value1(value: Int?): AlterJobRecord {
        this.jobId = value
        return this
    }

    override fun value2(value: YearToSecond?): AlterJobRecord {
        this.scheduleInterval = value
        return this
    }

    override fun value3(value: YearToSecond?): AlterJobRecord {
        this.maxRuntime = value
        return this
    }

    override fun value4(value: Int?): AlterJobRecord {
        this.maxRetries = value
        return this
    }

    override fun value5(value: YearToSecond?): AlterJobRecord {
        this.retryPeriod = value
        return this
    }

    override fun value6(value: Boolean?): AlterJobRecord {
        this.scheduled = value
        return this
    }

    override fun value7(value: String?): AlterJobRecord {
        this.config = value
        return this
    }

    override fun value8(value: OffsetDateTime?): AlterJobRecord {
        this.nextStart = value
        return this
    }

    override fun values(value1: Int?, value2: YearToSecond?, value3: YearToSecond?, value4: Int?, value5: YearToSecond?, value6: Boolean?, value7: String?, value8: OffsetDateTime?): AlterJobRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised AlterJobRecord
     */
    constructor(jobId: Int? = null, scheduleInterval: YearToSecond? = null, maxRuntime: YearToSecond? = null, maxRetries: Int? = null, retryPeriod: YearToSecond? = null, scheduled: Boolean? = null, config: String? = null, nextStart: OffsetDateTime? = null): this() {
        this.jobId = jobId
        this.scheduleInterval = scheduleInterval
        this.maxRuntime = maxRuntime
        this.maxRetries = maxRetries
        this.retryPeriod = retryPeriod
        this.scheduled = scheduled
        this.config = config
        this.nextStart = nextStart
    }
}
