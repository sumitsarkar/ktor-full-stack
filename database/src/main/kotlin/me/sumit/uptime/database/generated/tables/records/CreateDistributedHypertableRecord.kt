/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables.records


import me.sumit.uptime.database.generated.tables.CreateDistributedHypertable

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CreateDistributedHypertableRecord() : TableRecordImpl<CreateDistributedHypertableRecord>(CreateDistributedHypertable.CREATE_DISTRIBUTED_HYPERTABLE), Record4<Int?, String?, String?, Boolean?> {

    var hypertableId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var schemaName: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var tableName: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var created: Boolean?
        set(value) = set(3, value)
        get() = get(3) as Boolean?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, String?, Boolean?> = super.fieldsRow() as Row4<Int?, String?, String?, Boolean?>
    override fun valuesRow(): Row4<Int?, String?, String?, Boolean?> = super.valuesRow() as Row4<Int?, String?, String?, Boolean?>
    override fun field1(): Field<Int?> = CreateDistributedHypertable.CREATE_DISTRIBUTED_HYPERTABLE.HYPERTABLE_ID
    override fun field2(): Field<String?> = CreateDistributedHypertable.CREATE_DISTRIBUTED_HYPERTABLE.SCHEMA_NAME
    override fun field3(): Field<String?> = CreateDistributedHypertable.CREATE_DISTRIBUTED_HYPERTABLE.TABLE_NAME
    override fun field4(): Field<Boolean?> = CreateDistributedHypertable.CREATE_DISTRIBUTED_HYPERTABLE.CREATED
    override fun component1(): Int? = hypertableId
    override fun component2(): String? = schemaName
    override fun component3(): String? = tableName
    override fun component4(): Boolean? = created
    override fun value1(): Int? = hypertableId
    override fun value2(): String? = schemaName
    override fun value3(): String? = tableName
    override fun value4(): Boolean? = created

    override fun value1(value: Int?): CreateDistributedHypertableRecord {
        this.hypertableId = value
        return this
    }

    override fun value2(value: String?): CreateDistributedHypertableRecord {
        this.schemaName = value
        return this
    }

    override fun value3(value: String?): CreateDistributedHypertableRecord {
        this.tableName = value
        return this
    }

    override fun value4(value: Boolean?): CreateDistributedHypertableRecord {
        this.created = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Boolean?): CreateDistributedHypertableRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised CreateDistributedHypertableRecord
     */
    constructor(hypertableId: Int? = null, schemaName: String? = null, tableName: String? = null, created: Boolean? = null): this() {
        this.hypertableId = hypertableId
        this.schemaName = schemaName
        this.tableName = tableName
        this.created = created
    }
}
