/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables.daos


import java.time.OffsetDateTime

import kotlin.collections.List

import me.sumit.uptime.database.generated.tables.Monitor
import me.sumit.uptime.database.generated.tables.records.MonitorRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MonitorDao(configuration: Configuration?) : DAOImpl<MonitorRecord, me.sumit.uptime.database.generated.tables.pojos.Monitor, Long>(Monitor.MONITOR, me.sumit.uptime.database.generated.tables.pojos.Monitor::class.java, configuration) {

    /**
     * Create a new MonitorDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: me.sumit.uptime.database.generated.tables.pojos.Monitor): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetchRange(Monitor.MONITOR.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetch(Monitor.MONITOR.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): me.sumit.uptime.database.generated.tables.pojos.Monitor? = fetchOne(Monitor.MONITOR.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetchRange(Monitor.MONITOR.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetch(Monitor.MONITOR.NAME, *values)

    /**
     * Fetch records that have <code>endpoint BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfEndpoint(lowerInclusive: String?, upperInclusive: String?): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetchRange(Monitor.MONITOR.ENDPOINT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>endpoint IN (values)</code>
     */
    fun fetchByEndpoint(vararg values: String): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetch(Monitor.MONITOR.ENDPOINT, *values)

    /**
     * Fetch records that have <code>monitor_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfMonitorType(lowerInclusive: Long?, upperInclusive: Long?): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetchRange(Monitor.MONITOR.MONITOR_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>monitor_type IN (values)</code>
     */
    fun fetchByMonitorType(vararg values: Long): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetch(Monitor.MONITOR.MONITOR_TYPE, *values.toTypedArray())

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetchRange(Monitor.MONITOR.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetch(Monitor.MONITOR.CREATED_AT, *values)

    /**
     * Fetch records that have <code>modified_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfModifiedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetchRange(Monitor.MONITOR.MODIFIED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>modified_at IN (values)</code>
     */
    fun fetchByModifiedAt(vararg values: OffsetDateTime): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetch(Monitor.MONITOR.MODIFIED_AT, *values)

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfCreatedBy(lowerInclusive: String?, upperInclusive: String?): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetchRange(Monitor.MONITOR.CREATED_BY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    fun fetchByCreatedBy(vararg values: String): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetch(Monitor.MONITOR.CREATED_BY, *values)

    /**
     * Fetch records that have <code>modified_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfModifiedBy(lowerInclusive: String?, upperInclusive: String?): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetchRange(Monitor.MONITOR.MODIFIED_BY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>modified_by IN (values)</code>
     */
    fun fetchByModifiedBy(vararg values: String): List<me.sumit.uptime.database.generated.tables.pojos.Monitor> = fetch(Monitor.MONITOR.MODIFIED_BY, *values)
}
