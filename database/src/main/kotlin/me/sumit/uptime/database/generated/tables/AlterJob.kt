/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import java.time.OffsetDateTime

import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.AlterJobRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AlterJob(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AlterJobRecord>?,
    aliased: Table<AlterJobRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AlterJobRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.alter_job</code>
         */
        val ALTER_JOB = AlterJob()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AlterJobRecord> = AlterJobRecord::class.java

    /**
     * The column <code>public.alter_job.job_id</code>.
     */
    val JOB_ID: TableField<AlterJobRecord, Int?> = createField(DSL.name("job_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.alter_job.schedule_interval</code>.
     */
    val SCHEDULE_INTERVAL: TableField<AlterJobRecord, YearToSecond?> = createField(DSL.name("schedule_interval"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>public.alter_job.max_runtime</code>.
     */
    val MAX_RUNTIME: TableField<AlterJobRecord, YearToSecond?> = createField(DSL.name("max_runtime"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>public.alter_job.max_retries</code>.
     */
    val MAX_RETRIES: TableField<AlterJobRecord, Int?> = createField(DSL.name("max_retries"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.alter_job.retry_period</code>.
     */
    val RETRY_PERIOD: TableField<AlterJobRecord, YearToSecond?> = createField(DSL.name("retry_period"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>public.alter_job.scheduled</code>.
     */
    val SCHEDULED: TableField<AlterJobRecord, Boolean?> = createField(DSL.name("scheduled"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.alter_job.config</code>.
     */
    val CONFIG: TableField<AlterJobRecord, String?> = createField(DSL.name("config"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.alter_job.next_start</code>.
     */
    val NEXT_START: TableField<AlterJobRecord, OffsetDateTime?> = createField(DSL.name("next_start"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "")

    private constructor(alias: Name, aliased: Table<AlterJobRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<AlterJobRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.alter_job</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.alter_job</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.alter_job</code> table reference
     */
    constructor(): this(DSL.name("alter_job"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): AlterJob = AlterJob(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): AlterJob = AlterJob(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): AlterJob = AlterJob(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AlterJob = AlterJob(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, YearToSecond?, YearToSecond?, Int?, YearToSecond?, Boolean?, String?, OffsetDateTime?> = super.fieldsRow() as Row8<Int?, YearToSecond?, YearToSecond?, Int?, YearToSecond?, Boolean?, String?, OffsetDateTime?>

    /**
     * Call this table-valued function
     */
    fun call(
          jobId: Int?
        , scheduleInterval: YearToSecond?
        , maxRuntime: YearToSecond?
        , maxRetries: Int?
        , retryPeriod: YearToSecond?
        , scheduled: Boolean?
        , config: String?
        , nextStart: OffsetDateTime?
        , ifExists: Boolean?
    ): AlterJob = AlterJob(DSL.name("alter_job"), null, arrayOf(
          DSL.value(jobId, SQLDataType.INTEGER)
        , DSL.value(scheduleInterval, SQLDataType.INTERVAL.defaultValue(DSL.field("NULL::interval", SQLDataType.INTERVAL)))
        , DSL.value(maxRuntime, SQLDataType.INTERVAL.defaultValue(DSL.field("NULL::interval", SQLDataType.INTERVAL)))
        , DSL.value(maxRetries, SQLDataType.INTEGER.defaultValue(DSL.field("NULL::integer", SQLDataType.INTEGER)))
        , DSL.value(retryPeriod, SQLDataType.INTERVAL.defaultValue(DSL.field("NULL::interval", SQLDataType.INTERVAL)))
        , DSL.value(scheduled, SQLDataType.BOOLEAN.defaultValue(DSL.field("NULL::boolean", SQLDataType.BOOLEAN)))
        , DSL.value(config, SQLDataType.VARCHAR.defaultValue(DSL.field("NULL::jsonb", SQLDataType.VARCHAR)))
        , DSL.value(nextStart, SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(DSL.field("NULL::timestamp with time zone", SQLDataType.TIMESTAMPWITHTIMEZONE)))
        , DSL.value(ifExists, SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          jobId: Field<Int?>
        , scheduleInterval: Field<YearToSecond?>
        , maxRuntime: Field<YearToSecond?>
        , maxRetries: Field<Int?>
        , retryPeriod: Field<YearToSecond?>
        , scheduled: Field<Boolean?>
        , config: Field<String?>
        , nextStart: Field<OffsetDateTime?>
        , ifExists: Field<Boolean?>
    ): AlterJob = AlterJob(DSL.name("alter_job"), null, arrayOf(
          jobId
        , scheduleInterval
        , maxRuntime
        , maxRetries
        , retryPeriod
        , scheduled
        , config
        , nextStart
        , ifExists
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
