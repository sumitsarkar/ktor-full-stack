/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.routines


import me.sumit.uptime.database.generated.Public

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


@Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
@Suppress("UNCHECKED_CAST")
open class Locf : AbstractRoutine<Any>("locf", Public.PUBLIC, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"")) {
    companion object {
        @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val RETURN_VALUE: Parameter<Any?> = Internal.createParameter("RETURN_VALUE", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\""), false, false)
        @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val VALUE: Parameter<Any?> = Internal.createParameter("value", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\""), false, false)
        @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val PREV: Parameter<Any?> = Internal.createParameter("prev", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"").defaultValue(DSL.field("NULL::unknown", org.jooq.impl.SQLDataType.OTHER) as Any?), true, false)

        /**
         * The parameter <code>public.locf.treat_null_as_missing</code>.
         */
        val TREAT_NULL_AS_MISSING: Parameter<Boolean?> = Internal.createParameter("treat_null_as_missing", SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), true, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(VALUE)
        addInParameter(PREV)
        addInParameter(TREAT_NULL_AS_MISSING)
    }

    /**
     * Set the <code>value</code> parameter IN value to the routine
     */
    fun setValue(value: Any?) = setValue(VALUE, value)

    /**
     * Set the <code>value</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setValue(field: Field<Any?>): Unit {
        setField(VALUE, field)
    }

    /**
     * Set the <code>prev</code> parameter IN value to the routine
     */
    fun setPrev(value: Any?) = setValue(PREV, value)

    /**
     * Set the <code>prev</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setPrev(field: Field<Any?>): Unit {
        setField(PREV, field)
    }

    /**
     * Set the <code>treat_null_as_missing</code> parameter IN value to the routine
     */
    fun setTreatNullAsMissing(value: Boolean?) = setValue(TREAT_NULL_AS_MISSING, value)

    /**
     * Set the <code>treat_null_as_missing</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setTreatNullAsMissing(field: Field<Boolean?>): Unit {
        setField(TREAT_NULL_AS_MISSING, field)
    }
}
