/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.routines


import java.time.LocalDate

import me.sumit.uptime.database.generated.Public

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TimeBucketGapfill4 : AbstractRoutine<LocalDate>("time_bucket_gapfill", Public.PUBLIC, SQLDataType.LOCALDATE) {
    companion object {

        /**
         * The parameter <code>public.time_bucket_gapfill.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<LocalDate?> = Internal.createParameter("RETURN_VALUE", SQLDataType.LOCALDATE, false, false)

        /**
         * The parameter <code>public.time_bucket_gapfill.bucket_width</code>.
         */
        val BUCKET_WIDTH: Parameter<YearToSecond?> = Internal.createParameter("bucket_width", SQLDataType.INTERVAL, false, false)

        /**
         * The parameter <code>public.time_bucket_gapfill.ts</code>.
         */
        val TS: Parameter<LocalDate?> = Internal.createParameter("ts", SQLDataType.LOCALDATE, false, false)

        /**
         * The parameter <code>public.time_bucket_gapfill.start</code>.
         */
        val START: Parameter<LocalDate?> = Internal.createParameter("start", SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL::date", SQLDataType.LOCALDATE)), true, false)

        /**
         * The parameter <code>public.time_bucket_gapfill.finish</code>.
         */
        val FINISH: Parameter<LocalDate?> = Internal.createParameter("finish", SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL::date", SQLDataType.LOCALDATE)), true, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(BUCKET_WIDTH)
        addInParameter(TS)
        addInParameter(START)
        addInParameter(FINISH)
        setOverloaded(true)
    }

    /**
     * Set the <code>bucket_width</code> parameter IN value to the routine
     */
    fun setBucketWidth(value: YearToSecond?) = setValue(BUCKET_WIDTH, value)

    /**
     * Set the <code>bucket_width</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setBucketWidth(field: Field<YearToSecond?>): Unit {
        setField(BUCKET_WIDTH, field)
    }

    /**
     * Set the <code>ts</code> parameter IN value to the routine
     */
    fun setTs(value: LocalDate?) = setValue(TS, value)

    /**
     * Set the <code>ts</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setTs(field: Field<LocalDate?>): Unit {
        setField(TS, field)
    }

    /**
     * Set the <code>start</code> parameter IN value to the routine
     */
    fun setStart(value: LocalDate?) = setValue(START, value)

    /**
     * Set the <code>start</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setStart(field: Field<LocalDate?>): Unit {
        setField(START, field)
    }

    /**
     * Set the <code>finish</code> parameter IN value to the routine
     */
    fun setFinish(value: LocalDate?) = setValue(FINISH, value)

    /**
     * Set the <code>finish</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setFinish(field: Field<LocalDate?>): Unit {
        setField(FINISH, field)
    }
}
