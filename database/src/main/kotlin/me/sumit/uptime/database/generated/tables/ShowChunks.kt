/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.ShowChunksRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row1
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShowChunks(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ShowChunksRecord>?,
    aliased: Table<ShowChunksRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ShowChunksRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.show_chunks</code>
         */
        val SHOW_CHUNKS = ShowChunks()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ShowChunksRecord> = ShowChunksRecord::class.java
    @Deprecated(message = "Unknown data type. Please define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val SHOW_CHUNKS_: TableField<ShowChunksRecord, Any?> = createField(DSL.name("show_chunks"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"regclass\""), this, "")

    private constructor(alias: Name, aliased: Table<ShowChunksRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<ShowChunksRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.show_chunks</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.show_chunks</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.show_chunks</code> table reference
     */
    constructor(): this(DSL.name("show_chunks"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): ShowChunks = ShowChunks(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): ShowChunks = ShowChunks(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): ShowChunks = ShowChunks(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ShowChunks = ShowChunks(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row1<Any?> = super.fieldsRow() as Row1<Any?>

    /**
     * Call this table-valued function
     */
    fun call(
          relation: Any?
        , olderThan: Any?
        , newerThan: Any?
    ): ShowChunks = ShowChunks(DSL.name("show_chunks"), null, arrayOf(
          DSL.value(relation, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""))
        , DSL.value(olderThan, SQLDataType.OTHER.defaultValue(DSL.field("NULL::unknown", SQLDataType.OTHER) as Any?))
        , DSL.value(newerThan, SQLDataType.OTHER.defaultValue(DSL.field("NULL::unknown", SQLDataType.OTHER) as Any?))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          relation: Field<Any?>
        , olderThan: Field<Any?>
        , newerThan: Field<Any?>
    ): ShowChunks = ShowChunks(DSL.name("show_chunks"), null, arrayOf(
          relation
        , olderThan
        , newerThan
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
