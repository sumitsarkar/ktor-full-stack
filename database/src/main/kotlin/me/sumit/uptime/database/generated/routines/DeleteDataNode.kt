/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.routines


import me.sumit.uptime.database.generated.Public

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DeleteDataNode : AbstractRoutine<Boolean>("delete_data_node", Public.PUBLIC, SQLDataType.BOOLEAN) {
    companion object {

        /**
         * The parameter <code>public.delete_data_node.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<Boolean?> = Internal.createParameter("RETURN_VALUE", SQLDataType.BOOLEAN, false, false)

        /**
         * The parameter <code>public.delete_data_node.node_name</code>.
         */
        val NODE_NAME: Parameter<String?> = Internal.createParameter("node_name", SQLDataType.VARCHAR, false, false)

        /**
         * The parameter <code>public.delete_data_node.if_exists</code>.
         */
        val IF_EXISTS: Parameter<Boolean?> = Internal.createParameter("if_exists", SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), true, false)

        /**
         * The parameter <code>public.delete_data_node.force</code>.
         */
        val FORCE: Parameter<Boolean?> = Internal.createParameter("force", SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), true, false)

        /**
         * The parameter <code>public.delete_data_node.repartition</code>.
         */
        val REPARTITION: Parameter<Boolean?> = Internal.createParameter("repartition", SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), true, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(NODE_NAME)
        addInParameter(IF_EXISTS)
        addInParameter(FORCE)
        addInParameter(REPARTITION)
    }

    /**
     * Set the <code>node_name</code> parameter IN value to the routine
     */
    fun setNodeName(value: String?) = setValue(NODE_NAME, value)

    /**
     * Set the <code>node_name</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setNodeName(field: Field<String?>): Unit {
        setField(NODE_NAME, field)
    }

    /**
     * Set the <code>if_exists</code> parameter IN value to the routine
     */
    fun setIfExists(value: Boolean?) = setValue(IF_EXISTS, value)

    /**
     * Set the <code>if_exists</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setIfExists(field: Field<Boolean?>): Unit {
        setField(IF_EXISTS, field)
    }

    /**
     * Set the <code>force</code> parameter IN value to the routine
     */
    fun setForce(value: Boolean?) = setValue(FORCE, value)

    /**
     * Set the <code>force</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setForce(field: Field<Boolean?>): Unit {
        setField(FORCE, field)
    }

    /**
     * Set the <code>repartition</code> parameter IN value to the routine
     */
    fun setRepartition(value: Boolean?) = setValue(REPARTITION, value)

    /**
     * Set the <code>repartition</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    fun setRepartition(field: Field<Boolean?>): Unit {
        setField(REPARTITION, field)
    }
}
