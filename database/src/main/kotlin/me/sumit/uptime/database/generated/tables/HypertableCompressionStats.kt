/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.HypertableCompressionStatsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row11
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class HypertableCompressionStats(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, HypertableCompressionStatsRecord>?,
    aliased: Table<HypertableCompressionStatsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<HypertableCompressionStatsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.hypertable_compression_stats</code>
         */
        val HYPERTABLE_COMPRESSION_STATS = HypertableCompressionStats()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<HypertableCompressionStatsRecord> = HypertableCompressionStatsRecord::class.java

    /**
     * The column <code>public.hypertable_compression_stats.total_chunks</code>.
     */
    val TOTAL_CHUNKS: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("total_chunks"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.number_compressed_chunks</code>.
     */
    val NUMBER_COMPRESSED_CHUNKS: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("number_compressed_chunks"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.before_compression_table_bytes</code>.
     */
    val BEFORE_COMPRESSION_TABLE_BYTES: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("before_compression_table_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.before_compression_index_bytes</code>.
     */
    val BEFORE_COMPRESSION_INDEX_BYTES: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("before_compression_index_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.before_compression_toast_bytes</code>.
     */
    val BEFORE_COMPRESSION_TOAST_BYTES: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("before_compression_toast_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.before_compression_total_bytes</code>.
     */
    val BEFORE_COMPRESSION_TOTAL_BYTES: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("before_compression_total_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.after_compression_table_bytes</code>.
     */
    val AFTER_COMPRESSION_TABLE_BYTES: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("after_compression_table_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.after_compression_index_bytes</code>.
     */
    val AFTER_COMPRESSION_INDEX_BYTES: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("after_compression_index_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.after_compression_toast_bytes</code>.
     */
    val AFTER_COMPRESSION_TOAST_BYTES: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("after_compression_toast_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.after_compression_total_bytes</code>.
     */
    val AFTER_COMPRESSION_TOTAL_BYTES: TableField<HypertableCompressionStatsRecord, Long?> = createField(DSL.name("after_compression_total_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.hypertable_compression_stats.node_name</code>.
     */
    val NODE_NAME: TableField<HypertableCompressionStatsRecord, String?> = createField(DSL.name("node_name"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<HypertableCompressionStatsRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<HypertableCompressionStatsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.hypertable_compression_stats</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.hypertable_compression_stats</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.hypertable_compression_stats</code> table reference
     */
    constructor(): this(DSL.name("hypertable_compression_stats"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): HypertableCompressionStats = HypertableCompressionStats(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): HypertableCompressionStats = HypertableCompressionStats(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): HypertableCompressionStats = HypertableCompressionStats(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): HypertableCompressionStats = HypertableCompressionStats(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row11<Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?> = super.fieldsRow() as Row11<Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, Long?, String?>

    /**
     * Call this table-valued function
     */
    fun call(
          hypertable: Any?
    ): HypertableCompressionStats = HypertableCompressionStats(DSL.name("hypertable_compression_stats"), null, arrayOf(
          DSL.value(hypertable, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          hypertable: Field<Any?>
    ): HypertableCompressionStats = HypertableCompressionStats(DSL.name("hypertable_compression_stats"), null, arrayOf(
          hypertable
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
