/*
 * This file is generated by jOOQ.
 */
package me.sumit.uptime.database.generated.tables


import me.sumit.uptime.database.generated.Public
import me.sumit.uptime.database.generated.tables.records.AttachDataNodeRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AttachDataNode(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AttachDataNodeRecord>?,
    aliased: Table<AttachDataNodeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AttachDataNodeRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.attach_data_node</code>
         */
        val ATTACH_DATA_NODE = AttachDataNode()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AttachDataNodeRecord> = AttachDataNodeRecord::class.java

    /**
     * The column <code>public.attach_data_node.hypertable_id</code>.
     */
    val HYPERTABLE_ID: TableField<AttachDataNodeRecord, Int?> = createField(DSL.name("hypertable_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.attach_data_node.node_hypertable_id</code>.
     */
    val NODE_HYPERTABLE_ID: TableField<AttachDataNodeRecord, Int?> = createField(DSL.name("node_hypertable_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.attach_data_node.node_name</code>.
     */
    val NODE_NAME: TableField<AttachDataNodeRecord, String?> = createField(DSL.name("node_name"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<AttachDataNodeRecord>?): this(alias, null, null, aliased, arrayOf())
    private constructor(alias: Name, aliased: Table<AttachDataNodeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.attach_data_node</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.attach_data_node</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.attach_data_node</code> table reference
     */
    constructor(): this(DSL.name("attach_data_node"), null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): AttachDataNode = AttachDataNode(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): AttachDataNode = AttachDataNode(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): AttachDataNode = AttachDataNode(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AttachDataNode = AttachDataNode(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, String?> = super.fieldsRow() as Row3<Int?, Int?, String?>

    /**
     * Call this table-valued function
     */
    fun call(
          nodeName: String?
        , hypertable: Any?
        , ifNotAttached: Boolean?
        , repartition: Boolean?
    ): AttachDataNode = AttachDataNode(DSL.name("attach_data_node"), null, arrayOf(
          DSL.value(nodeName, SQLDataType.VARCHAR)
        , DSL.value(hypertable, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""))
        , DSL.value(ifNotAttached, SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)))
        , DSL.value(repartition, SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          nodeName: Field<String?>
        , hypertable: Field<Any?>
        , ifNotAttached: Field<Boolean?>
        , repartition: Field<Boolean?>
    ): AttachDataNode = AttachDataNode(DSL.name("attach_data_node"), null, arrayOf(
          nodeName
        , hypertable
        , ifNotAttached
        , repartition
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
